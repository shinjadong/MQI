#!/usr/bin/env python3
"""
Google Sheets Manager (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)
Íµ¨Í∏Ä ÏãúÌä∏ Î¶¨Ïä§ÌåÖ Î∞è ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú ÎèÑÍµ¨ - Ìñ•ÏÉÅÎêú Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú Í∏∞Îä•

ÏÇ¨Ïö©Î≤ï:
    python google_sheets_manager_improved.py list                    # Î™®Îì† ÏãúÌä∏ Î¶¨Ïä§ÌåÖ
    python google_sheets_manager_improved.py download [sheet_id]     # ÌäπÏ†ï ÏãúÌä∏ Îã§Ïö¥Î°úÎìú
    python google_sheets_manager_improved.py download-url [url]      # URLÏóêÏÑú ÏãúÌä∏ Îã§Ïö¥Î°úÎìú
    python google_sheets_manager_improved.py download-all            # Î™®Îì† ÏãúÌä∏ Îã§Ïö¥Î°úÎìú
"""

import os
import json
import argparse
import pandas as pd
import re
from datetime import datetime
from urllib.parse import urlparse, parse_qs
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError


class GoogleSheetsManagerImproved:
    """Í∞úÏÑ†Îêú Google Sheets API Í¥ÄÎ¶¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(self, service_account_file: str):
        """
        Google Sheets Manager Ï¥àÍ∏∞Ìôî
        
        Args:
            service_account_file: Google Service Account ÌÇ§ ÌååÏùº Í≤ΩÎ°ú
        """
        self.service_account_file = service_account_file
        self.scopes = [
            'https://www.googleapis.com/auth/spreadsheets.readonly',
            'https://www.googleapis.com/auth/drive.readonly'
        ]
        self.credentials = self._authenticate()
        self.sheets_service = build('sheets', 'v4', credentials=self.credentials)
        self.drive_service = build('drive', 'v3', credentials=self.credentials)
    
    def _authenticate(self) -> Credentials:
        """Google API Ïù∏Ï¶ù"""
        try:
            credentials = Credentials.from_service_account_file(
                self.service_account_file, scopes=self.scopes
            )
            return credentials
        except Exception as e:
            print(f"‚ùå Ïù∏Ï¶ù Ïã§Ìå®: {e}")
            raise
    
    def extract_spreadsheet_id(self, url: str) -> str:
        """
        Google Sheets URLÏóêÏÑú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID Ï∂îÏ∂ú
        
        Args:
            url: Google Sheets URL
            
        Returns:
            str: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
        """
        try:
            # URL Ìå®ÌÑ¥ Îß§Ïπ≠
            patterns = [
                r'/spreadsheets/d/([a-zA-Z0-9-_]+)',
                r'id=([a-zA-Z0-9-_]+)',
                r'^([a-zA-Z0-9-_]+)$'  # ÏßÅÏ†ë IDÏù∏ Í≤ΩÏö∞
            ]
            
            for pattern in patterns:
                match = re.search(pattern, url)
                if match:
                    return match.group(1)
            
            raise ValueError("Ïú†Ìö®Ìïú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ IDÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
            
        except Exception as e:
            print(f"‚ùå URL ÌååÏã± Ïã§Ìå®: {e}")
            raise
    
    def check_sheet_permissions(self, spreadsheet_id: str) -> bool:
        """
        Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï†ëÍ∑º Í∂åÌïú ÌôïÏù∏
        
        Args:
            spreadsheet_id: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
            
        Returns:
            bool: Ï†ëÍ∑º Í∞ÄÎä• Ïó¨Î∂Ä
        """
        try:
            print(f"üîê Í∂åÌïú ÌôïÏù∏ Ï§ë: {spreadsheet_id}")
            
            # Í∏∞Î≥∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ ÏãúÎèÑ
            spreadsheet = self.sheets_service.spreadsheets().get(
                spreadsheetId=spreadsheet_id,
                fields='properties'
            ).execute()
            
            print(f"‚úÖ Ï†ëÍ∑º Í∞ÄÎä•: {spreadsheet.get('properties', {}).get('title', 'Unknown')}")
            return True
            
        except HttpError as error:
            if error.resp.status == 403:
                print(f"‚ùå Ï†ëÍ∑º Í∂åÌïú ÏóÜÏùå: {error}")
                print("üí° Ìï¥Í≤∞ Î∞©Î≤ï:")
                print("   1. Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ÏÜåÏú†ÏûêÍ∞Ä Service AccountÏóê ÏùΩÍ∏∞ Í∂åÌïú Î∂ÄÏó¨")
                print("   2. Ïä§ÌîÑÎ†àÎìúÏãúÌä∏Î•º 'ÎßÅÌÅ¨Í∞Ä ÏûàÎäî Î™®Îì† ÏÇ¨Ïö©Ïûê'Î°ú Í≥µÏú† ÏÑ§Ï†ï")
                print(f"   3. Service Account Ïù¥Î©îÏùº: {self.credentials.service_account_email}")
            else:
                print(f"‚ùå API Ïò§Î•ò: {error}")
            return False
        except Exception as e:
            print(f"‚ùå ÏòàÏÉÅÏπò Î™ªÌïú Ïò§Î•ò: {e}")
            return False
    
    def get_sheet_info(self, spreadsheet_id: str) -> dict:
        """
        Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
        
        Args:
            spreadsheet_id: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
            
        Returns:
            dict: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï†ïÎ≥¥
        """
        try:
            spreadsheet = self.sheets_service.spreadsheets().get(
                spreadsheetId=spreadsheet_id
            ).execute()
            
            return {
                'title': spreadsheet.get('properties', {}).get('title', 'Unknown'),
                'sheets': spreadsheet.get('sheets', [])
            }
            
        except Exception as e:
            print(f"‚ùå Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: {e}")
            return {}
    
    def get_used_range(self, spreadsheet_id: str, sheet_name: str) -> str:
        """
        ÏãúÌä∏Ïùò Ïã§Ï†ú ÏÇ¨Ïö©Îêú Î≤îÏúÑ Ï∞æÍ∏∞
        
        Args:
            spreadsheet_id: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
            sheet_name: ÏãúÌä∏ Ïù¥Î¶Ñ
            
        Returns:
            str: ÏÇ¨Ïö©Îêú Î≤îÏúÑ (Ïòà: A1:Z100)
        """
        try:
            # ÌÅ∞ Î≤îÏúÑÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            range_name = f"'{sheet_name}'!A1:ZZ10000"
            result = self.sheets_service.spreadsheets().values().get(
                spreadsheetId=spreadsheet_id,
                range=range_name
            ).execute()
            
            values = result.get('values', [])
            if not values:
                return f"'{sheet_name}'!A1:A1"
            
            # Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî ÎßàÏßÄÎßâ ÌñâÍ≥º Ïó¥ Ï∞æÍ∏∞
            last_row = len(values)
            last_col = 0
            
            for row in values:
                if len(row) > last_col:
                    last_col = len(row)
            
            # Ïó¥ Î≤àÌò∏Î•º Î¨∏ÏûêÎ°ú Î≥ÄÌôò
            last_col_letter = self._num_to_col_letter(last_col)
            
            return f"'{sheet_name}'!A1:{last_col_letter}{last_row}"
            
        except Exception as e:
            print(f"‚ö†Ô∏è Î≤îÏúÑ Í≥ÑÏÇ∞ Ïã§Ìå®, Í∏∞Î≥∏ Î≤îÏúÑ ÏÇ¨Ïö©: {e}")
            return f"'{sheet_name}'"
    
    def _num_to_col_letter(self, num: int) -> str:
        """Ïà´ÏûêÎ•º ÏóëÏÖÄ Ïó¥ Î¨∏ÏûêÎ°ú Î≥ÄÌôò"""
        result = ""
        while num > 0:
            num -= 1
            result = chr(num % 26 + ord('A')) + result
            num //= 26
        return result
    
    def get_sheet_data_advanced(self, spreadsheet_id: str) -> dict:
        """
        Ìñ•ÏÉÅÎêú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
        
        Args:
            spreadsheet_id: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
            
        Returns:
            dict: ÏãúÌä∏Î≥Ñ Îç∞Ïù¥ÌÑ∞
        """
        try:
            # Í∂åÌïú ÌôïÏù∏
            if not self.check_sheet_permissions(spreadsheet_id):
                return {}
            
            print(f"üìä Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ ÏùΩÎäî Ï§ë... (ID: {spreadsheet_id})")
            
            # Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
            sheet_info = self.get_sheet_info(spreadsheet_id)
            if not sheet_info:
                return {}
            
            spreadsheet_title = sheet_info['title']
            sheets = sheet_info['sheets']
            
            all_data = {}
            
            for sheet in sheets:
                sheet_title = sheet.get('properties', {}).get('title', 'Unknown')
                sheet_id = sheet.get('properties', {}).get('sheetId', 0)
                
                print(f"  üìÑ ÏãúÌä∏ '{sheet_title}' (ID: {sheet_id}) ÏùΩÎäî Ï§ë...")
                
                # Ïó¨Îü¨ Î≤îÏúÑ ÏãúÎèÑ
                ranges_to_try = [
                    f"'{sheet_title}'",  # Ï†ÑÏ≤¥ ÏãúÌä∏
                    f"'{sheet_title}'!A:Z",  # AÎ∂ÄÌÑ∞ ZÏó¥ÍπåÏßÄ
                    f"'{sheet_title}'!A1:Z1000",  # Íµ¨Ï≤¥Ï†ÅÏù∏ Î≤îÏúÑ
                    self.get_used_range(spreadsheet_id, sheet_title)  # ÏÇ¨Ïö©Îêú Î≤îÏúÑ
                ]
                
                data_found = False
                for range_name in ranges_to_try:
                    try:
                        print(f"    üîç Î≤îÏúÑ '{range_name}' ÏãúÎèÑ Ï§ë...")
                        
                        result = self.sheets_service.spreadsheets().values().get(
                            spreadsheetId=spreadsheet_id,
                            range=range_name,
                            valueRenderOption='FORMATTED_VALUE',
                            dateTimeRenderOption='FORMATTED_STRING'
                        ).execute()
                        
                        values = result.get('values', [])
                        
                        if values:
                            # Îπà Ìñâ Ï†úÍ±∞
                            filtered_values = []
                            for row in values:
                                if any(cell.strip() if isinstance(cell, str) else str(cell).strip() for cell in row):
                                    filtered_values.append(row)
                            
                            if filtered_values:
                                print(f"    ‚úÖ Îç∞Ïù¥ÌÑ∞ Î∞úÍ≤¨: {len(filtered_values)}Ìñâ")
                                
                                # Ï≤´ Î≤àÏß∏ ÌñâÏùÑ Ìó§ÎçîÎ°ú ÏÇ¨Ïö©
                                headers = filtered_values[0] if filtered_values else []
                                data_rows = filtered_values[1:] if len(filtered_values) > 1 else []
                                
                                # Îç∞Ïù¥ÌÑ∞ Ï†ïÍ∑úÌôî
                                if data_rows:
                                    max_cols = max(len(row) for row in [headers] + data_rows)
                                    
                                    # Ìó§Îçî Í∏∏Ïù¥ Ï°∞Ï†ï
                                    if len(headers) < max_cols:
                                        headers.extend([f'Column_{i}' for i in range(len(headers), max_cols)])
                                    elif len(headers) > max_cols:
                                        headers = headers[:max_cols]
                                    
                                    # Í∞Å ÌñâÏùò Í∏∏Ïù¥Î•º Ìó§Îçî Í∏∏Ïù¥Ïóê ÎßûÏ∂§
                                    normalized_rows = []
                                    for row in data_rows:
                                        if len(row) < max_cols:
                                            row.extend([''] * (max_cols - len(row)))
                                        elif len(row) > max_cols:
                                            row = row[:max_cols]
                                        normalized_rows.append(row)
                                    
                                    df = pd.DataFrame(normalized_rows, columns=headers)
                                    all_data[sheet_title] = df
                                    
                                    print(f"    ‚úÖ {len(data_rows)}Ìñâ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏôÑÎ£å (Ïª¨Îüº Ïàò: {max_cols})")
                                    data_found = True
                                    break
                                else:
                                    # Ìó§ÎçîÎßå ÏûàÎäî Í≤ΩÏö∞
                                    df = pd.DataFrame(columns=headers)
                                    all_data[sheet_title] = df
                                    print(f"    ‚ö†Ô∏è Ìó§ÎçîÎßå ÏûàÎäî ÏãúÌä∏")
                                    data_found = True
                                    break
                    
                    except Exception as e:
                        print(f"    ‚ùå Î≤îÏúÑ '{range_name}' ÏùΩÍ∏∞ Ïã§Ìå®: {e}")
                        continue
                
                if not data_found:
                    print(f"    ‚ö†Ô∏è Îπà ÏãúÌä∏Ïù¥Í±∞ÎÇò Îç∞Ïù¥ÌÑ∞Î•º ÏùΩÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
                    all_data[sheet_title] = pd.DataFrame()
            
            return {
                'title': spreadsheet_title,
                'data': all_data
            }
            
        except Exception as e:
            print(f"‚ùå Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïã§Ìå®: {e}")
            return {}
    
    def list_sheets(self) -> list:
        """Ïï°ÏÑ∏Ïä§ Í∞ÄÎä•Ìïú Î™®Îì† Google Sheets ÌååÏùº Î¶¨Ïä§ÌåÖ"""
        try:
            print("üîç Google Sheets ÌååÏùº Í≤ÄÏÉâ Ï§ë...")
            
            results = self.drive_service.files().list(
                q="mimeType='application/vnd.google-apps.spreadsheet'",
                pageSize=100,
                fields="nextPageToken, files(id, name, createdTime, modifiedTime, owners)"
            ).execute()
            
            files = results.get('files', [])
            
            if not files:
                print("üìÑ Ïï°ÏÑ∏Ïä§ Í∞ÄÎä•Ìïú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§.")
                return []
            
            sheet_list = []
            for file in files:
                sheet_info = {
                    'id': file['id'],
                    'name': file['name'],
                    'created_time': file.get('createdTime', ''),
                    'modified_time': file.get('modifiedTime', ''),
                    'owners': [owner.get('displayName', 'Unknown') for owner in file.get('owners', [])]
                }
                sheet_list.append(sheet_info)
            
            return sheet_list
            
        except Exception as e:
            print(f"‚ùå Î¶¨Ïä§ÌåÖ Ïã§Ìå®: {e}")
            return []
    
    def print_sheet_list(self, sheet_list: list):
        """ÏãúÌä∏ Î™©Î°ùÏùÑ Î≥¥Í∏∞ Ï¢ãÍ≤å Ï∂úÎ†•"""
        if not sheet_list:
            print("üìÑ ÌëúÏãúÌï† ÏãúÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§.")
            return
        
        print(f"\nüìã Ï¥ù {len(sheet_list)}Í∞úÏùò Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Î∞úÍ≤¨:")
        print("-" * 80)
        
        for i, sheet in enumerate(sheet_list, 1):
            created_date = sheet['created_time'][:10] if sheet['created_time'] else 'Unknown'
            modified_date = sheet['modified_time'][:10] if sheet['modified_time'] else 'Unknown'
            owners = ', '.join(sheet['owners']) if sheet['owners'] else 'Unknown'
            
            print(f"{i:2d}. üìä {sheet['name']}")
            print(f"    ID: {sheet['id']}")
            print(f"    ÏÜåÏú†Ïûê: {owners}")
            print(f"    ÏÉùÏÑ±Ïùº: {created_date}")
            print(f"    ÏàòÏ†ïÏùº: {modified_date}")
            print("-" * 80)
    
    def download_to_excel(self, spreadsheet_id: str, output_dir: str = "downloads"):
        """
        Ïä§ÌîÑÎ†àÎìúÏãúÌä∏Î•º ÏóëÏÖÄ ÌååÏùºÎ°ú Îã§Ïö¥Î°úÎìú
        
        Args:
            spreadsheet_id: Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID
            output_dir: Îã§Ïö¥Î°úÎìúÌï† ÎîîÎ†âÌÜ†Î¶¨
        """
        try:
            # Îã§Ïö¥Î°úÎìú ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
            os.makedirs(output_dir, exist_ok=True)
            
            # Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Í∞úÏÑ†Îêú Î∞©Î≤ï)
            sheet_data = self.get_sheet_data_advanced(spreadsheet_id)
            
            if not sheet_data:
                print("‚ùå Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.")
                return
            
            # ÌååÏùºÎ™Ö ÏÉùÏÑ±
            safe_title = "".join(c for c in sheet_data['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{safe_title}_{timestamp}.xlsx"
            filepath = os.path.join(output_dir, filename)
            
            # ÏóëÏÖÄ ÌååÏùºÎ°ú Ï†ÄÏû•
            print(f"üíæ ÏóëÏÖÄ ÌååÏùºÎ°ú Ï†ÄÏû• Ï§ë: {filepath}")
            
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                for sheet_name, df in sheet_data['data'].items():
                    # ÏïàÏ†ÑÌïú ÏãúÌä∏Î™Ö ÏÉùÏÑ±
                    safe_sheet_name = "".join(c for c in sheet_name if c not in ['/', '\\', '?', '*', ':', '[', ']'])
                    safe_sheet_name = safe_sheet_name[:31]
                    
                    df.to_excel(writer, sheet_name=safe_sheet_name, index=False)
                    print(f"  ‚úÖ ÏãúÌä∏ '{sheet_name}' Ï†ÄÏû• ÏôÑÎ£å ({len(df)}Ìñâ)")
            
            print(f"üéâ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: {filepath}")
            
        except Exception as e:
            print(f"‚ùå Îã§Ïö¥Î°úÎìú Ïã§Ìå®: {e}")
    
    def download_from_url(self, url: str, output_dir: str = "downloads"):
        """
        URLÏóêÏÑú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ Îã§Ïö¥Î°úÎìú
        
        Args:
            url: Google Sheets URL
            output_dir: Îã§Ïö¥Î°úÎìúÌï† ÎîîÎ†âÌÜ†Î¶¨
        """
        try:
            spreadsheet_id = self.extract_spreadsheet_id(url)
            print(f"üìã Ï∂îÏ∂úÎêú Ïä§ÌîÑÎ†àÎìúÏãúÌä∏ ID: {spreadsheet_id}")
            self.download_to_excel(spreadsheet_id, output_dir)
            
        except Exception as e:
            print(f"‚ùå URL Îã§Ïö¥Î°úÎìú Ïã§Ìå®: {e}")


def main():
    """Î©îÏù∏ Ìï®Ïàò"""
    parser = argparse.ArgumentParser(description='Google Sheets Í¥ÄÎ¶¨ ÎèÑÍµ¨ (Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ)')
    parser.add_argument('action', choices=['list', 'download', 'download-url', 'download-all'], 
                       help='ÏàòÌñâÌï† ÏûëÏóÖ')
    parser.add_argument('target', nargs='?', 
                       help='ÏãúÌä∏ ID ÎòêÎäî URL')
    parser.add_argument('--output', '-o', default='downloads',
                       help='Îã§Ïö¥Î°úÎìú ÎîîÎ†âÌÜ†Î¶¨ (Í∏∞Î≥∏Í∞í: downloads)')
    parser.add_argument('--service-account', '-s', default='cctvtec-mail-b013de0946d8.json',
                       help='Service Account ÌÇ§ ÌååÏùº (Í∏∞Î≥∏Í∞í: cctvtec-mail-b013de0946d8.json)')
    
    args = parser.parse_args()
    
    if not os.path.exists(args.service_account):
        print(f"‚ùå Service Account ÌÇ§ ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {args.service_account}")
        return
    
    try:
        manager = GoogleSheetsManagerImproved(args.service_account)
        
        if args.action == 'list':
            sheet_list = manager.list_sheets()
            manager.print_sheet_list(sheet_list)
            
        elif args.action == 'download':
            if not args.target:
                print("‚ùå ÏãúÌä∏ IDÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                return
            manager.download_to_excel(args.target, args.output)
            
        elif args.action == 'download-url':
            if not args.target:
                print("‚ùå Google Sheets URLÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.")
                return
            manager.download_from_url(args.target, args.output)
            
        elif args.action == 'download-all':
            sheet_list = manager.list_sheets()
            for sheet in sheet_list:
                print(f"\nüì• Îã§Ïö¥Î°úÎìú Ï§ë: {sheet['name']}")
                manager.download_to_excel(sheet['id'], args.output)
            
    except Exception as e:
        print(f"‚ùå ÌîÑÎ°úÍ∑∏Îû® Ïã§Ìñâ Ï§ë Ïò§Î•ò: {e}")


if __name__ == "__main__":
    main()